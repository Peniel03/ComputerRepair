// <auto-generated />
using System;
using ComputerRepair.DataAccess.DataContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ComputerRepair.DataAccess.Migrations
{
    [DbContext(typeof(ComputerRepairContext))]
    [Migration("20221207113001_NewMigration")]
    partial class NewMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ComputerRepair.DataAccess.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"));

                    b.Property<int>("NumberOfUnits")
                        .HasColumnType("int");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrderStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RepairingTypeId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("OrderId");

                    b.HasIndex("RepairingTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("ComputerRepair.DataAccess.Models.Payement", b =>
                {
                    b.Property<int>("PayementId")
                        .HasColumnType("int");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("PayementDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PayementStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PayementId");

                    b.ToTable("Payements");
                });

            modelBuilder.Entity("ComputerRepair.DataAccess.Models.RepairingService", b =>
                {
                    b.Property<int>("RepairingServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RepairingServiceId"));

                    b.Property<int>("RepairingTeamId")
                        .HasColumnType("int");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ServicePrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("RepairingServiceId");

                    b.HasIndex("RepairingTeamId");

                    b.ToTable("RepairingServices");
                });

            modelBuilder.Entity("ComputerRepair.DataAccess.Models.RepairingTeam", b =>
                {
                    b.Property<int>("RepairingTeamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RepairingTeamId"));

                    b.Property<int>("RepairingTypeId")
                        .HasColumnType("int");

                    b.Property<string>("TeamName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RepairingTeamId");

                    b.HasIndex("RepairingTypeId");

                    b.ToTable("RepairingTeams");
                });

            modelBuilder.Entity("ComputerRepair.DataAccess.Models.RepairingType", b =>
                {
                    b.Property<int>("RepairingTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RepairingTypeId"));

                    b.Property<string>("RepairingTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RepairingTypeId");

                    b.ToTable("RepairingTypes");
                });

            modelBuilder.Entity("ComputerRepair.DataAccess.Models.Review", b =>
                {
                    b.Property<int>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReviewId"));

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("Rate")
                        .HasColumnType("int");

                    b.Property<string>("ReviewField")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ReviewId");

                    b.HasIndex("OrderId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("ComputerRepair.DataAccess.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ComputerRepair.DataAccess.Models.Order", b =>
                {
                    b.HasOne("ComputerRepair.DataAccess.Models.RepairingType", "RepairingType")
                        .WithMany("Orders")
                        .HasForeignKey("RepairingTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ComputerRepair.DataAccess.Models.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RepairingType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ComputerRepair.DataAccess.Models.Payement", b =>
                {
                    b.HasOne("ComputerRepair.DataAccess.Models.Order", "Order")
                        .WithOne("Payement")
                        .HasForeignKey("ComputerRepair.DataAccess.Models.Payement", "PayementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("ComputerRepair.DataAccess.Models.RepairingService", b =>
                {
                    b.HasOne("ComputerRepair.DataAccess.Models.RepairingTeam", "RepairingTeam")
                        .WithMany("RepairingServices")
                        .HasForeignKey("RepairingTeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RepairingTeam");
                });

            modelBuilder.Entity("ComputerRepair.DataAccess.Models.RepairingTeam", b =>
                {
                    b.HasOne("ComputerRepair.DataAccess.Models.RepairingType", "RepairingType")
                        .WithMany("RepairingTeams")
                        .HasForeignKey("RepairingTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RepairingType");
                });

            modelBuilder.Entity("ComputerRepair.DataAccess.Models.Review", b =>
                {
                    b.HasOne("ComputerRepair.DataAccess.Models.Order", "Order")
                        .WithMany("Reviews")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("ComputerRepair.DataAccess.Models.Order", b =>
                {
                    b.Navigation("Payement");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("ComputerRepair.DataAccess.Models.RepairingTeam", b =>
                {
                    b.Navigation("RepairingServices");
                });

            modelBuilder.Entity("ComputerRepair.DataAccess.Models.RepairingType", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("RepairingTeams");
                });

            modelBuilder.Entity("ComputerRepair.DataAccess.Models.User", b =>
                {
                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
